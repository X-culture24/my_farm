version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: farm-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: farm_system_dev
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data_dev:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - farm-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: farm-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - farm-network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: farm-backend-dev
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/farm_system_dev?authSource=admin
      REDIS_URL: redis://:redis123@redis:6379
      JWT_SECRET: dev-jwt-secret-key-change-in-production
      JWT_REFRESH_SECRET: dev-refresh-secret-key
      FRONTEND_URL: http://localhost:3001
      LOG_LEVEL: debug
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src:ro
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - farm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: farm-frontend-dev
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:3000/api
      REACT_APP_SOCKET_URL: http://localhost:3000
      NODE_ENV: development
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - farm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional for dev)
  nginx:
    image: nginx:1.25-alpine
    container_name: farm-nginx-dev
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - farm-network

volumes:
  mongodb_data_dev:
    driver: local
  redis_data_dev:
    driver: local

networks:
  farm-network:
    driver: bridge
