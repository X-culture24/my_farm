# Default values for farm-system
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
replicaCount: 2

image:
  backend:
    repository: farm-system/backend
    pullPolicy: IfNotPresent
    tag: "latest"
  frontend:
    repository: farm-system/frontend
    pullPolicy: IfNotPresent
    tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod Security Context
podAnnotations: {}
podSecurityContext:
  fsGroup: 1001

# Container Security Context
securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1001
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false

# Services
service:
  backend:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  frontend:
    type: ClusterIP
    port: 3000
    targetPort: 3000

# Ingress
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: farm-system.local
      paths:
        - path: /api
          pathType: Prefix
          service: backend
        - path: /
          pathType: Prefix
          service: frontend
  tls:
    - secretName: farm-system-tls
      hosts:
        - farm-system.local

# Resources
resources:
  backend:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  frontend:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

# Autoscaling
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Node Selection
nodeSelector: {}
tolerations: []
affinity: {}

# Environment Configuration
environment: production

# Application Environment Variables
env:
  NODE_ENV: production
  PORT: "3000"
  LOG_LEVEL: info
  JWT_EXPIRES_IN: "15m"
  JWT_REFRESH_EXPIRES_IN: "7d"
  RATE_LIMIT_WINDOW: "15"
  RATE_LIMIT_MAX: "100"
  HEALTH_CHECK_INTERVAL: "30"
  METRICS_ENABLED: "true"

# Secrets (these should be set via --set-string or values files)
secrets:
  jwtSecret: ""
  jwtRefreshSecret: ""
  sessionSecret: ""
  mongodbPassword: ""
  redisPassword: ""

# Persistent Volumes
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# MongoDB Configuration
mongodb:
  enabled: true
  auth:
    enabled: true
    rootUser: admin
    rootPassword: ""
    database: farm_system
  persistence:
    enabled: true
    size: 20Gi
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi

# Redis Configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: ""
  master:
    persistence:
      enabled: true
      size: 5Gi
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi

# Health Checks
healthcheck:
  enabled: true
  livenessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
  prometheusRule:
    enabled: true

# Backup Configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: "7d"
